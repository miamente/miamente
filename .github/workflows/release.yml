name: Release Management

# DISABLED: GitHub Actions disabled for migration to FastAPI
# if: false

on:
  push:
    tags:
      - "v*"
  workflow_dispatch:
    inputs:
      version:
        description: "Version to release (e.g., v1.0.0)"
        required: true
        type: string
      environment:
        description: "Environment to release to"
        required: true
        default: "production"
        type: choice
        options:
          - production
          - staging

env:
  NODE_VERSION: "22"

jobs:
  create-release:
    name: Create Release
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.version.outputs.version }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Determine version
        id: version
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            echo "version=${{ github.event.inputs.version }}" >> $GITHUB_OUTPUT
          else
            echo "version=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
          fi

      - name: Generate changelog
        id: changelog
        run: |
          # Get commits since last tag
          if git describe --tags --abbrev=0 HEAD~1 >/dev/null 2>&1; then
            LAST_TAG=$(git describe --tags --abbrev=0 HEAD~1)
            echo "last_tag=$LAST_TAG" >> $GITHUB_OUTPUT
          else
            echo "last_tag=" >> $GITHUB_OUTPUT
          fi

          # Generate changelog
          if [ -n "$LAST_TAG" ]; then
            CHANGELOG=$(git log --pretty=format:"- %s (%h)" $LAST_TAG..HEAD)
          else
            CHANGELOG=$(git log --pretty=format:"- %s (%h)" --max-count=20)
          fi

          echo "changelog<<EOF" >> $GITHUB_OUTPUT
          echo "$CHANGELOG" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Create Release
        uses: actions/create-release@v1
        id: create_release
        with:
          tag_name: ${{ steps.version.outputs.version }}
          release_name: Release ${{ steps.version.outputs.version }}
          body: |
            ## üöÄ Release ${{ steps.version.outputs.version }}

            ### üìã Changes
            ${{ steps.changelog.outputs.changelog }}

            ### ÔøΩÔøΩ Links
            - **Production**: https://miamente-prod.web.app
            - **Staging**: https://miamente-staging.web.app
            - **Documentation**: [Deployment Guide](DEPLOYMENT_READY.md)

            ### üõ†Ô∏è Deployment
            This release will be automatically deployed to production.

            ### üìä Monitoring
            - Health checks are active
            - Auto rollback is enabled
            - Monitoring dashboard available

            ### üÜò Support
            If you encounter any issues, please:
            1. Check the [rollback issues](https://github.com/${{ github.repository }}/issues?q=is%3Aissue+label%3Arollback)
            2. Review the deployment logs
            3. Contact the development team
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: create-release
    if: false # Disabled: github.event_name == 'push' || github.event.inputs.environment == 'production'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "npm"

      - name: Install dependencies
        run: npm ci

      - name: Build web application
        run: cd apps/web && npm run build
        env:
          NEXT_PUBLIC_FB_API_KEY: ${{ secrets.NEXT_PUBLIC_FB_API_KEY }}
          NEXT_PUBLIC_FB_AUTH_DOMAIN: ${{ secrets.NEXT_PUBLIC_FB_AUTH_DOMAIN }}
          NEXT_PUBLIC_FB_PROJECT_ID: ${{ secrets.NEXT_PUBLIC_FB_PROJECT_ID }}
          NEXT_PUBLIC_FB_STORAGE_BUCKET: ${{ secrets.NEXT_PUBLIC_FB_STORAGE_BUCKET }}
          NEXT_PUBLIC_FB_MESSAGING_SENDER_ID: ${{ secrets.NEXT_PUBLIC_FB_MESSAGING_SENDER_ID }}
          NEXT_PUBLIC_FB_APP_ID: ${{ secrets.NEXT_PUBLIC_FB_APP_ID }}
          NEXT_PUBLIC_FB_MEASUREMENT_ID: ${{ secrets.NEXT_PUBLIC_FB_MEASUREMENT_ID }}
          NEXT_PUBLIC_RECAPTCHA_ENTERPRISE_SITE_KEY: ${{ secrets.NEXT_PUBLIC_RECAPTCHA_ENTERPRISE_SITE_KEY }}

      - name: Build Firebase Functions
        run: cd functions && npm run build

      - name: Authenticate to Firebase
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.FIREBASE_SERVICE_ACCOUNT }}

      - name: Deploy to Firebase Hosting (Production)
        uses: FirebaseExtended/action-hosting-deploy@v0
        with:
          repoToken: ${{ secrets.GITHUB_TOKEN }}
          firebaseServiceAccount: ${{ secrets.FIREBASE_SERVICE_ACCOUNT }}
          projectId: miamente-prod

      - name: Deploy Firebase Functions (Production)
        run: |
          cd functions
          firebase deploy --only functions --project=miamente-prod --token=${{ secrets.FIREBASE_TOKEN }}

      - name: Start Health Monitoring
        run: |
          echo "Starting health monitoring for production deployment..."
          # This would typically be a background process
          echo "Health monitoring started for version ${{ needs.create-release.outputs.version }}"

      - name: Notify Production Deployment
        run: |
          echo "üöÄ Production deployment completed successfully!"
          echo "üì± URL: https://miamente-prod.web.app"
          echo "üè∑Ô∏è  Version: ${{ needs.create-release.outputs.version }}"
          echo "üîó Release: ${{ steps.create_release.outputs.html_url }}"
          echo "üë§ Author: ${{ github.actor }}"

  post-deployment-checks:
    name: Post-Deployment Health Checks
    runs-on: ubuntu-latest
    needs: [create-release, deploy-production]
    if: always() && needs.deploy-production.result == 'success'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Install dependencies
        run: npm ci

      - name: Install Firebase CLI
        run: npm install -g firebase-tools

      - name: Run Health Checks
        run: |
          chmod +x scripts/deployment/auto-rollback.sh
          ./scripts/deployment/auto-rollback.sh health
        env:
          FIREBASE_TOKEN: ${{ secrets.FIREBASE_TOKEN }}

      - name: Start Auto Monitoring
        run: |
          echo "Starting auto monitoring for production..."
          # In a real scenario, this would start a background monitoring process
          echo "Auto monitoring started for version ${{ needs.create-release.outputs.version }}"
