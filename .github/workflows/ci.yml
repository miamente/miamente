name: CI/CD Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]

env:
  NODE_VERSION: "22"
  FIREBASE_PROJECT_ID: miamente-test

jobs:
  # Job 1: Setup and Dependencies
  setup:
    name: Setup and Install Dependencies
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "npm"

      - name: Install dependencies
        run: npm ci

      - name: Cache node_modules
        uses: actions/cache@v4
        with:
          path: |
            node_modules
            apps/web/node_modules
            functions/node_modules
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

  # Job 2: Lint and Format Check
  lint:
    name: Lint and Format Check
    runs-on: ubuntu-latest
    needs: setup
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "npm"

      - name: Install dependencies
        run: npm ci

      - name: Run ESLint
        run: npm run lint

      - name: Check Prettier formatting
        run: npm run format:check

  # Job 3: TypeScript Type Check
  typecheck:
    name: TypeScript Type Check
    runs-on: ubuntu-latest
    needs: setup
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "npm"

      - name: Install dependencies
        run: npm ci

      - name: Type check web app
        run: cd apps/web && npm run typecheck

      - name: Type check functions
        run: cd functions && npm run typecheck

  # Job 4: Build Applications
  build:
    name: Build Applications
    runs-on: ubuntu-latest
    needs: [setup, lint, typecheck]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "npm"

      - name: Install dependencies
        run: npm ci

      - name: Build web application
        run: cd apps/web && npm run build
        env:
          NEXT_PUBLIC_FB_API_KEY: ${{ secrets.NEXT_PUBLIC_FB_API_KEY }}
          NEXT_PUBLIC_FB_AUTH_DOMAIN: ${{ secrets.NEXT_PUBLIC_FB_AUTH_DOMAIN }}
          NEXT_PUBLIC_FB_PROJECT_ID: ${{ secrets.NEXT_PUBLIC_FB_PROJECT_ID }}
          NEXT_PUBLIC_FB_STORAGE_BUCKET: ${{ secrets.NEXT_PUBLIC_FB_STORAGE_BUCKET }}
          NEXT_PUBLIC_FB_MESSAGING_SENDER_ID: ${{ secrets.NEXT_PUBLIC_FB_MESSAGING_SENDER_ID }}
          NEXT_PUBLIC_FB_APP_ID: ${{ secrets.NEXT_PUBLIC_FB_APP_ID }}
          NEXT_PUBLIC_FB_MEASUREMENT_ID: ${{ secrets.NEXT_PUBLIC_FB_MEASUREMENT_ID }}
          NEXT_PUBLIC_RECAPTCHA_ENTERPRISE_SITE_KEY: ${{ secrets.NEXT_PUBLIC_RECAPTCHA_ENTERPRISE_SITE_KEY }}

      - name: Build Firebase Functions
        run: cd functions && npm run build

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-artifacts
          path: |
            apps/web/.next
            functions/lib
          retention-days: 1

  # Job 5: Unit Tests
  unit-tests:
    name: Unit Tests
    runs-on: ubuntu-latest
    needs: setup
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "npm"

      - name: Install dependencies
        run: npm ci

      - name: Run unit tests
        run: npm run test:ci
        env:
          NODE_ENV: test

      - name: Upload coverage reports
        uses: codecov/codecov-action@v4
        with:
          files: ./coverage/lcov.info
          flags: unittests
          name: codecov-umbrella
          fail_ci_if_error: false

  # Job 6: Firebase Emulator Tests
  emulator-tests:
    name: Firebase Emulator Tests
    runs-on: ubuntu-latest
    needs: setup
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "npm"

      - name: Install dependencies
        run: npm ci

      - name: Setup Java (required for Firebase Emulator)
        uses: actions/setup-java@v4
        with:
          distribution: "temurin"
          java-version: "17"

      - name: Install Firebase CLI
        run: npm install -g firebase-tools

      - name: Start Firebase Emulators
        run: |
          firebase emulators:start --project=${{ env.FIREBASE_PROJECT_ID }} --only firestore,storage,auth &
          sleep 30
        env:
          FIREBASE_TOKEN: ${{ secrets.FIREBASE_TOKEN }}

      - name: Run Emulator Tests
        run: npm run test:emulator
        env:
          FIREBASE_EMULATOR_HUB: localhost:4400
          FIRESTORE_EMULATOR_HOST: localhost:8080
          FIREBASE_AUTH_EMULATOR_HOST: localhost:9099
          FIREBASE_STORAGE_EMULATOR_HOST: localhost:9199

      - name: Stop Firebase Emulators
        run: pkill -f firebase

  # Job 7: Accessibility Tests
  accessibility-tests:
    name: Accessibility Tests
    runs-on: ubuntu-latest
    needs: setup
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "npm"

      - name: Install dependencies
        run: npm ci

      - name: Run accessibility tests
        run: cd apps/web && npm run test:accessibility

  # Job 8: E2E Tests (Local)
  e2e-tests-local:
    name: E2E Tests (Local)
    runs-on: ubuntu-latest
    needs: [build, unit-tests, emulator-tests, accessibility-tests]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "npm"

      - name: Install dependencies
        run: npm ci

      - name: Install Playwright browsers
        run: npx playwright install --with-deps

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-artifacts
          path: .

      - name: Start Next.js server
        run: |
          cd apps/web
          npm start &
          sleep 30
        env:
          NODE_ENV: production
          PORT: 3000

      - name: Run E2E tests
        run: npm run test:e2e
        env:
          E2E_BASE_URL: http://localhost:3000
          NODE_ENV: test

      - name: Upload E2E test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: e2e-test-results-local
          path: |
            test-results/
            playwright-report/
          retention-days: 3

  # Job 9: Lighthouse Performance Tests
  lighthouse:
    name: Lighthouse Performance Tests
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "npm"

      - name: Install dependencies
        run: npm ci

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-artifacts
          path: .

      - name: Verify build artifacts
        run: |
          echo "Checking build artifacts..."
          ls -la apps/web/.next/ || echo "No .next directory found"
          ls -la functions/lib/ || echo "No functions/lib directory found"

          # Verify Next.js build
          if [ ! -d "apps/web/.next" ]; then
            echo "❌ Next.js build not found, rebuilding..."
            cd apps/web
            npm run build
            cd ../..
          else
            echo "✅ Next.js build found"
          fi
        env:
          NEXT_PUBLIC_FB_API_KEY: ${{ secrets.NEXT_PUBLIC_FB_API_KEY }}
          NEXT_PUBLIC_FB_AUTH_DOMAIN: ${{ secrets.NEXT_PUBLIC_FB_AUTH_DOMAIN }}
          NEXT_PUBLIC_FB_PROJECT_ID: ${{ secrets.NEXT_PUBLIC_FB_PROJECT_ID }}
          NEXT_PUBLIC_FB_STORAGE_BUCKET: ${{ secrets.NEXT_PUBLIC_FB_STORAGE_BUCKET }}
          NEXT_PUBLIC_FB_MESSAGING_SENDER_ID: ${{ secrets.NEXT_PUBLIC_FB_MESSAGING_SENDER_ID }}
          NEXT_PUBLIC_FB_APP_ID: ${{ secrets.NEXT_PUBLIC_FB_APP_ID }}
          NEXT_PUBLIC_FB_MEASUREMENT_ID: ${{ secrets.NEXT_PUBLIC_FB_MEASUREMENT_ID }}
          NEXT_PUBLIC_RECAPTCHA_ENTERPRISE_SITE_KEY: ${{ secrets.NEXT_PUBLIC_RECAPTCHA_ENTERPRISE_SITE_KEY }}

      - name: Start Next.js server
        run: |
          cd apps/web

          # Start server with verbose logging
          echo "Starting Next.js server..."
          npm start > server.log 2>&1 &
          SERVER_PID=$!
          echo "Server started with PID: $SERVER_PID"

          # Save PID for cleanup
          echo $SERVER_PID > /tmp/nextjs.pid

          # Wait for server to be ready with comprehensive health check
          echo "Waiting for server to start..."
          for i in {1..90}; do
            # Check if process is still running
            if ! kill -0 $SERVER_PID 2>/dev/null; then
              echo "Server process died!"
              cat server.log
              exit 1
            fi
            
            # Check HTTP response
            if curl -f -s -o /dev/null http://localhost:3000; then
              echo "Server is ready after ${i} attempts!"
              break
            fi
            
            if [ $i -eq 90 ]; then
              echo "Server failed to start within 180 seconds"
              echo "Server logs:"
              cat server.log
              echo "Process status:"
              ps aux | grep node || echo "No node processes"
              echo "Port status:"
              netstat -tlnp 2>/dev/null | grep :3000 || echo "Port 3000 not listening"
              exit 1
            fi
            
            echo "Waiting... (${i}/90)"
            sleep 2
          done

          # Additional verification
          echo "Final server verification..."
          curl -v http://localhost:3000 2>&1 | head -20
        env:
          NODE_ENV: production
          PORT: 3000

      - name: Run Lighthouse CI
        uses: treosh/lighthouse-ci-action@v10
        with:
          configPath: "./apps/web/.lighthouserc.json"
          uploadArtifacts: false
          temporaryPublicStorage: true
        env:
          LHCI_GITHUB_APP_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Check Lighthouse scores
        run: |
          # Check if lighthouse scores meet requirements
          if [ -f "lighthouse-results.json" ]; then
            echo "Lighthouse results found"
            # This would need to be implemented based on actual lighthouse results format
            echo "Performance and Accessibility scores checked"
          else
            echo "No lighthouse results found"
            exit 1
          fi

      - name: Cleanup
        if: always()
        run: |
          echo "Cleaning up..."
          if [ -f "/tmp/nextjs.pid" ]; then
            SERVER_PID=$(cat /tmp/nextjs.pid)
            if kill -0 $SERVER_PID 2>/dev/null; then
              echo "Stopping Next.js server (PID: $SERVER_PID)"
              kill $SERVER_PID
            fi
          fi
          # Kill any remaining node processes
          pkill -f "next start" || echo "No Next.js processes to kill"

  # Job 10: Security Tests
  security-tests:
    name: Security Tests
    runs-on: ubuntu-latest
    needs: setup
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "npm"

      - name: Install dependencies
        run: npm ci

      - name: Run security audit
        run: npm audit --audit-level=moderate

  # Job 11: Integration Tests
  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: [build, emulator-tests]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "npm"

      - name: Install dependencies
        run: npm ci

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-artifacts
          path: .

      - name: Run integration tests
        run: npm run test:integration
        env:
          NODE_ENV: test

  # Job 12: Deploy to Staging (only on main branch)
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs:
      [
        build,
        unit-tests,
        emulator-tests,
        accessibility-tests,
        e2e-tests-local,
        lighthouse,
        security-tests,
      ]
    if: false # Disabled: github.ref == 'refs/heads/main' && github.event_name == 'push'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "npm"

      - name: Install dependencies
        run: npm ci

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-artifacts
          path: .

      - name: Authenticate to Firebase
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.FIREBASE_SERVICE_ACCOUNT_STAGING }}

      - name: Deploy to Firebase Hosting (Staging)
        uses: FirebaseExtended/action-hosting-deploy@v0
        with:
          repoToken: ${{ secrets.GITHUB_TOKEN }}
          firebaseServiceAccount: ${{ secrets.FIREBASE_SERVICE_ACCOUNT_STAGING }}
          channelId: staging
          projectId: ${{ env.FIREBASE_PROJECT_ID }}

      - name: Deploy Firebase Functions (Staging)
        run: |
          cd functions
          firebase deploy --only functions --project=${{ env.FIREBASE_PROJECT_ID }} --token=${{ secrets.FIREBASE_TOKEN }}

  # Job 13: Notify on Failure
  notify-failure:
    name: Notify on Failure
    runs-on: ubuntu-latest
    needs:
      [
        lint,
        typecheck,
        build,
        unit-tests,
        emulator-tests,
        accessibility-tests,
        e2e-tests-local,
        lighthouse,
        security-tests,
      ]
    if: failure()
    steps:
      - name: Notify failure
        run: |
          echo "CI Pipeline failed. Check the logs for details."
          # Add notification logic here (Slack, email, etc.)

  # Job 14: Success Summary
  success-summary:
    name: Success Summary
    runs-on: ubuntu-latest
    needs:
      [
        lint,
        typecheck,
        build,
        unit-tests,
        emulator-tests,
        accessibility-tests,
        e2e-tests-local,
        lighthouse,
        security-tests,
      ]
    if: success()
    steps:
      - name: Success summary
        run: |
          echo "✅ All CI checks passed successfully!"
          echo "📊 Test coverage reports available"
          echo "🔒 Security scans completed"
          echo "♿ Accessibility tests passed"
          echo "🧪 E2E tests completed"
          echo "⚡ Lighthouse performance scores met"
          echo "🚀 Ready for deployment"
