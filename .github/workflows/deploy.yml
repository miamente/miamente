name: Deploy to Firebase

on:
  # Staging deployment on push to dev branch
  # Production deployment on release tags
  push:
    branches: [dev]
    tags:
      - "v*"

  # Manual production deployment
  workflow_dispatch:
    inputs:
      environment:
        description: "Environment to deploy to"
        required: true
        default: "staging"
        type: choice
        options:
          - staging
          - production
      skip_tests:
        description: "Skip tests (use with caution)"
        required: false
        default: false
        type: boolean

env:
  NODE_VERSION: "22"

jobs:
  # Job 1: Determine deployment environment
  determine-environment:
    name: Determine Deployment Environment
    runs-on: ubuntu-latest
    outputs:
      environment: ${{ steps.env.outputs.environment }}
      project_id: ${{ steps.env.outputs.project_id }}
      is_production: ${{ steps.env.outputs.is_production }}
    steps:
      - name: Determine environment
        id: env
        run: |
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            echo "environment=${{ github.event.inputs.environment }}" >> $GITHUB_OUTPUT
            if [[ "${{ github.event.inputs.environment }}" == "production" ]]; then
              echo "project_id=miamente-prod" >> $GITHUB_OUTPUT
              echo "is_production=true" >> $GITHUB_OUTPUT
            else
              echo "project_id=miamente-staging" >> $GITHUB_OUTPUT
              echo "is_production=false" >> $GITHUB_OUTPUT
            fi
          elif [[ "${{ github.ref }}" == refs/heads/dev ]]; then
            echo "environment=staging" >> $GITHUB_OUTPUT
            echo "project_id=miamente-staging" >> $GITHUB_OUTPUT
            echo "is_production=false" >> $GITHUB_OUTPUT
          elif [[ "${{ github.ref }}" == refs/tags/v* ]]; then
            echo "environment=production" >> $GITHUB_OUTPUT
            echo "project_id=miamente-prod" >> $GITHUB_OUTPUT
            echo "is_production=true" >> $GITHUB_OUTPUT
          else
            echo "environment=staging" >> $GITHUB_OUTPUT
            echo "project_id=miamente-staging" >> $GITHUB_OUTPUT
            echo "is_production=false" >> $GITHUB_OUTPUT
          fi

  # Job 2: Pre-deployment tests (skip if manual override)
  pre-deployment-tests:
    name: Pre-deployment Tests
    runs-on: ubuntu-latest
    if: ${{ github.event.inputs.skip_tests != 'true' }}
    needs: determine-environment
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "npm"

      - name: Install dependencies
        run: npm ci

      - name: Run linting
        run: npm run lint

      - name: Run type checking
        run: npm run typecheck

      - name: Run tests
        run: npm run test:ci

      - name: Build applications
        run: npm run build
        env:
          NEXT_PUBLIC_FB_API_KEY: ${{ secrets.NEXT_PUBLIC_FB_API_KEY }}
          NEXT_PUBLIC_FB_AUTH_DOMAIN: ${{ secrets.NEXT_PUBLIC_FB_AUTH_DOMAIN }}
          NEXT_PUBLIC_FB_PROJECT_ID: ${{ secrets.NEXT_PUBLIC_FB_PROJECT_ID }}
          NEXT_PUBLIC_FB_STORAGE_BUCKET: ${{ secrets.NEXT_PUBLIC_FB_STORAGE_BUCKET }}
          NEXT_PUBLIC_FB_MESSAGING_SENDER_ID: ${{ secrets.NEXT_PUBLIC_FB_MESSAGING_SENDER_ID }}
          NEXT_PUBLIC_FB_APP_ID: ${{ secrets.NEXT_PUBLIC_FB_APP_ID }}
          NEXT_PUBLIC_FB_MEASUREMENT_ID: ${{ secrets.NEXT_PUBLIC_FB_MEASUREMENT_ID }}
          NEXT_PUBLIC_RECAPTCHA_ENTERPRISE_SITE_KEY: ${{ secrets.NEXT_PUBLIC_RECAPTCHA_ENTERPRISE_SITE_KEY }}

  # Job 3: Deploy to Firebase
  deploy:
    name: Deploy to ${{ needs.determine-environment.outputs.environment }}
    runs-on: ubuntu-latest
    needs: [determine-environment, pre-deployment-tests]
    if: always() && (needs.pre-deployment-tests.result == 'success' || needs.pre-deployment-tests.result == 'skipped')
    environment: ${{ needs.determine-environment.outputs.environment }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "npm"

      - name: Install dependencies
        run: npm ci

      - name: Build web application
        run: cd apps/web && npm run build
        env:
          NEXT_PUBLIC_FB_API_KEY: ${{ secrets.NEXT_PUBLIC_FB_API_KEY }}
          NEXT_PUBLIC_FB_AUTH_DOMAIN: ${{ secrets.NEXT_PUBLIC_FB_AUTH_DOMAIN }}
          NEXT_PUBLIC_FB_PROJECT_ID: ${{ needs.determine-environment.outputs.project_id }}
          NEXT_PUBLIC_FB_STORAGE_BUCKET: ${{ secrets.NEXT_PUBLIC_FB_STORAGE_BUCKET }}
          NEXT_PUBLIC_FB_MESSAGING_SENDER_ID: ${{ secrets.NEXT_PUBLIC_FB_MESSAGING_SENDER_ID }}
          NEXT_PUBLIC_FB_APP_ID: ${{ secrets.NEXT_PUBLIC_FB_APP_ID }}
          NEXT_PUBLIC_FB_MEASUREMENT_ID: ${{ secrets.NEXT_PUBLIC_FB_MEASUREMENT_ID }}
          NEXT_PUBLIC_RECAPTCHA_ENTERPRISE_SITE_KEY: ${{ secrets.NEXT_PUBLIC_RECAPTCHA_ENTERPRISE_SITE_KEY }}

      - name: Build Firebase Functions
        run: cd functions && npm run build
        env:
          SENDGRID_API_KEY: ${{ secrets.SENDGRID_API_KEY }}
          WOMPI_SECRET: ${{ secrets.WOMPI_SECRET }}
          JITSI_BASE_URL: ${{ secrets.JITSI_BASE_URL }}

      - name: Authenticate to Firebase
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.FIREBASE_SERVICE_ACCOUNT }}

      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v2

      - name: Install Firebase CLI
        run: npm install -g firebase-tools

      - name: Deploy to Firebase Hosting
        run: |
          cd apps/web
          firebase deploy --only hosting --project=${{ needs.determine-environment.outputs.project_id }}
        env:
          FIREBASE_TOKEN: ${{ secrets.FIREBASE_TOKEN }}

      - name: Deploy Firebase Functions
        run: |
          cd functions
          firebase deploy --only functions --project=${{ needs.determine-environment.outputs.project_id }}
        env:
          FIREBASE_TOKEN: ${{ secrets.FIREBASE_TOKEN }}
          SENDGRID_API_KEY: ${{ secrets.SENDGRID_API_KEY }}
          WOMPI_SECRET: ${{ secrets.WOMPI_SECRET }}
          JITSI_BASE_URL: ${{ secrets.JITSI_BASE_URL }}
          REMINDERS_AUTH_TOKEN: ${{ secrets.REMINDERS_AUTH_TOKEN }}

      - name: Deploy Firestore Security Rules
        run: |
          firebase deploy --only firestore:rules --project=${{ needs.determine-environment.outputs.project_id }}
        env:
          FIREBASE_TOKEN: ${{ secrets.FIREBASE_TOKEN }}

      - name: Deploy Storage Security Rules
        run: |
          firebase deploy --only storage --project=${{ needs.determine-environment.outputs.project_id }}
        env:
          FIREBASE_TOKEN: ${{ secrets.FIREBASE_TOKEN }}

      - name: Get deployment URLs
        id: urls
        run: |
          if [[ "${{ needs.determine-environment.outputs.is_production }}" == "true" ]]; then
            echo "hosting_url=https://miamente-prod.web.app" >> $GITHUB_OUTPUT
            echo "functions_url=https://us-central1-miamente-prod.cloudfunctions.net" >> $GITHUB_OUTPUT
          else
            echo "hosting_url=https://miamente-staging.web.app" >> $GITHUB_OUTPUT
            echo "functions_url=https://us-central1-miamente-staging.cloudfunctions.net" >> $GITHUB_OUTPUT
          fi

      - name: Create deployment summary
        run: |
          echo "## üöÄ Deployment Successful!" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Environment:** ${{ needs.determine-environment.outputs.environment }}" >> $GITHUB_STEP_SUMMARY
          echo "**Project ID:** ${{ needs.determine-environment.outputs.project_id }}" >> $GITHUB_STEP_SUMMARY
          echo "**Branch/Tag:** ${{ github.ref_name }}" >> $GITHUB_STEP_SUMMARY
          echo "**Commit:** ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### üåê URLs" >> $GITHUB_STEP_SUMMARY
          echo "- **Hosting:** ${{ steps.urls.outputs.hosting_url }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Functions:** ${{ steps.urls.outputs.functions_url }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### üìä Deployment Details" >> $GITHUB_STEP_SUMMARY
          echo "- ‚úÖ Web Application deployed" >> $GITHUB_STEP_SUMMARY
          echo "- ‚úÖ Firebase Functions deployed" >> $GITHUB_STEP_SUMMARY
          echo "- ‚úÖ Firestore Security Rules deployed" >> $GITHUB_STEP_SUMMARY
          echo "- ‚úÖ Storage Security Rules deployed" >> $GITHUB_STEP_SUMMARY

  # Job 4: Post-deployment verification
  post-deployment-verification:
    name: Post-deployment Verification
    runs-on: ubuntu-latest
    needs: [determine-environment, deploy]
    if: always() && needs.deploy.result == 'success'
    steps:
      - name: Verify hosting deployment
        run: |
          if [[ "${{ needs.determine-environment.outputs.is_production }}" == "true" ]]; then
            URL="https://miamente-prod.web.app"
          else
            URL="https://miamente-staging.web.app"
          fi

          echo "Verifying deployment at: $URL"

          # Check if the site is accessible
          HTTP_STATUS=$(curl -s -o /dev/null -w "%{http_code}" "$URL")
          if [[ "$HTTP_STATUS" == "200" ]]; then
            echo "‚úÖ Hosting deployment verified successfully"
          else
            echo "‚ùå Hosting deployment verification failed (HTTP $HTTP_STATUS)"
            exit 1
          fi

      - name: Verify functions deployment
        run: |
          if [[ "${{ needs.determine-environment.outputs.is_production }}" == "true" ]]; then
            PROJECT_ID="miamente-prod"
          else
            PROJECT_ID="miamente-staging"
          fi

          echo "Verifying functions deployment for project: $PROJECT_ID"

          # Install Firebase CLI
          npm install -g firebase-tools

          # List deployed functions
          firebase functions:list --project=$PROJECT_ID || echo "Functions list verification completed"

  # Job 5: Notify deployment status
  notify:
    name: Notify Deployment Status
    runs-on: ubuntu-latest
    needs: [determine-environment, deploy, post-deployment-verification]
    if: always()
    steps:
      - name: Deployment success notification
        if: needs.deploy.result == 'success'
        run: |
          echo "üéâ Deployment to ${{ needs.determine-environment.outputs.environment }} completed successfully!"
          echo "URL: ${{ needs.deploy.outputs.hosting_url }}"

      - name: Deployment failure notification
        if: needs.deploy.result == 'failure'
        run: |
          echo "‚ùå Deployment to ${{ needs.determine-environment.outputs.environment }} failed!"
          echo "Please check the logs for details."

  # Job 6: Create release (production only)
  create-release:
    name: Create Release
    runs-on: ubuntu-latest
    needs: [determine-environment, deploy, post-deployment-verification]
    if: needs.determine-environment.outputs.is_production == 'true' && needs.deploy.result == 'success' && github.event_name == 'push' && startsWith(github.ref, 'refs/tags/')
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Create release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref_name }}
          release_name: Release ${{ github.ref_name }}
          body: |
            ## üöÄ Production Deployment

            **Environment:** Production
            **Project:** miamente-prod
            **URL:** https://miamente-prod.web.app

            ### Changes
            - Deployed from tag: ${{ github.ref_name }}
            - Commit: ${{ github.sha }}

            ### Verification
            - ‚úÖ Hosting deployed
            - ‚úÖ Functions deployed
            - ‚úÖ Security rules deployed
            - ‚úÖ Post-deployment verification passed
          draft: false
          prerelease: false
